@startuml
class user{
    -String username
    -String password
    -int coins
    -int score
    -String securityToken
    -stack* myStack
    -deck* myDeck
    -dialogue* myDialogue
    -card* myOffer
    -demand* myDemand
    ..Getter..
    +String getUsername()
    +String getPassword()
    +stack* getStack()
    +deck* getDeck()
    +int getCoins()
    +int getScore()
    +String getSecurityToken()
    +card* getMyOffer()
    +demand* getMyDemand()
    ..Setter..
    +void setUsername(String username)
    +void setPassword(String password)
    +void setMyOffer(card* myOffer)
    +void setMyDemand(int minDamage, String type, String element)
    --Constructor--
    +user(username, password, token)
    --Methods--
    +void changeCoins(int difference)
    +void changeScore(int difference)
    +void selectDeck()
    +void removeMyOffer()
    +void removeMyDemand()
}

class card{
    -String type {spell or monster}
    -String name
    -int damage
    -String element
    -String status
    ..Getter & Setter..
    --Constructor--
  +card(String type, String name, int damage, String element){}
}

class deck{
    -vector<card*> deckOfCards {4}
    ..Getter..
    +vector*<card*> getDeckOfCards()
    --Constructor--
    +deck()
    --Method--
    +void addCardToDeck(card* chosenCard)
    +void emptyDeck()
}

class package{
    -vector<card*> packOfCards {5}
    ..Getter..
    +vector*<card*> getPackOfCards()
    --Constructor--
    +package(vector*<card*> Cards)
}

class stack{
    -vector<card*> allPlayerCards {25}
    ..Getter..
    +vector*<card*> getStack()
    --Constructor--
    +stack()
    --Methods--
    +void addCardsToStack(vector*<cards*> newCards)
    +void addCardToStack(card* newCard)
    +void removeCard(int index)
    +void changeCardStatus(int index)
}

class scoreBoard{
    -vector<String> winner
    -vector<String> loser
    ..Getter..
    +vector*<String> getWinnerList()
    +vector*<String> getLoserList()
    --Constructor--
    +scoreBoard()
    --Methods--
    +void addWinnerAndLoser(String winnerName, String loserName)
}

class battle{
    -int round
    ..Getter..
    +int getRound()
    --Constructor--
    battle()
    --Methods--
    +void increaseRound()
    +card* chooseAttackingCard(user* currentUser)
    +bool isCardStronger(card* card1, card* card2)(specialty checking included)
    +bool isUserOutOfCards(user* user1, user* user2)
}

class monsterBattle extends battle{

}

class mixBattle extends battle{
    +bool isCardStrongerElements(card* card1, card* card2)(bool is if card is stronger)
}

class dialogue{
    --Constructor--
    +dialogue()
    --Methods--
    +void startScreen()
    +void LoginOrRegistration()
    +void tradingScreen(user* currentUser, user* otherUser)
    +void chooseCard(user* currentUser)
    +void viewPackages()
    +void chooseDeck(user* currentUser)
    +void battleRoundDescription(user* currentUser, user* otherUser)
    +void victoryScreen(user* currentUser)
    +void scoreboard(scoreboard* gameScoreboard)

}

class demand{
    -int demandMinDamage
    -String demandType
    -String demandElement
    ..Getter..
    +int getDemandMinDamage()
    +String getDemandType()
    +String getDemandElement()
    ..Setter..
    +void setDemandMinDamage(int minDamage)
    +void setDemandType(String type)
    +void setDemandElement(String element)
    --Constructor--
    +demand(minDamage, type, element)
}

class gameControl{
 -user* User1
 -user* User2
 -battle* currentBattle
 -dialogue* gameDialogue
 -scoreboard* gameScoreboard
 ..Setter..
 +void setUser1(name, password, token)
 +void setUser2(name, password, token)
 +void setBattle()
 --Constructor--
 +gameControl()
 --Methods--
 +void playGame()
 +void signInUsers()
 +user* checkWhichUser(String token)
 +void visitTradingCenter(String token)
  +void setUpTrade(user* currentUser)
  +card* selectCardForTrading(user* currentUser)
  +void setUpDemand(int minDamage, String type, String element)
 +void viewOtherOffer(String token)
  +void agreeToTrade(String token)
   +bool checkIfCardAccepted(card* chosenCard)
   +void tradeTheCards(user* currentUser, user* recipientUser, card* chosenCard)
   +int findIndexOfCard(user* thisUser, card* chosenCard)(to actually remove need index)
 +void changeProfile(user* currentUser)
 +void buyPackages(user* currentUser)
  +package* generatePackage(String type)
 +void chooseBattle()
 +void startBattle()
  +void chooseDeck(user* currentUser)
  +void updateScores(user* winner, user* loser)
  +void updateScoreboard(String winner, String loser)
 +void emptyAll()
}


gameControl --> user: controls + includes
gameControl --> package: controls
gameControl --> scoreBoard: controls + includes
gameControl --> battle: controls + includes
gameControl --> demand: controls
gameControl --> dialogue: controls + includes

user --> deck: controls + includes
user --> stack: controls + includes
user --> demand: includes
user --> dialogue: controls + includes

deck --> card: controls + includes

stack --> card: controls + includes

battle --> monsterBattle: is parent
battle --> mixBattle: is parent



@enduml