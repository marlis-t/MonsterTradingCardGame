@startuml
class user{
    -String username
    -String password
    -int coins
    -int score
    -Stack myStack
    -Deck myDeck
    ..Getter..
    ..Setter..
    --Constructor--
    +user(username, password, token)
    --Methods--
    +void changeCoins(int difference)
    +void changeScore(int difference)
    +void selectDeck()
}

class userRegistration{
}

class card{
    -String type {spell or monster}
    -String name
    -int damage
    -String element
    -bool isPaused
    ..Getter..
    ..Setter..
    --Constructor--
  +card(String name, int damage, bool isPaused)
}

class deck{
    -List<Card> deckOfCards {4}
    ..Getter..
    --Constructor--
    +deck()
    --Method--
    +void addCardToDeck(card chosenCard)
    +bool removeCardFromDeck(card chosenCard)
    +void emptyDeck()
}

class package{
    -List<card> packOfCards {5}
    ..Getter..
    --Constructor--
    +package(List<card> Cards)
}

class stack{
    -List<card> allPlayerCards {25}
    ..Getter..
    --Constructor--
    +stack()
    --Methods--
    +void addCardToStack(card newCard)
    +bool removeCard(card chosenCard)
    +bool changeCardStatus(card chosenCard)
}

class scoreBoard{
    -List<String> winners
    -List<String> losers
    ..Getter..
    --Constructor--
    +scoreBoard()
    --Methods--
    +void addWinnerAndLoser(String winnerName, String loserName)
}

class battle{
    -int round
    ..Getter..
    --Constructor--
    battle()
    --Methods--
    +void chooseDeck(user currentUser)
    +void increaseRound()
    +card chooseAttackingCard(user currentUser)
    +bool isCardStronger(card card1, card card2)
    +void gainCard(user cardLosingUser, user cardGainingUser, card changingCard)
    +bool isUserOutOfCards(user user1, user user2)
}

class monsterBattle extends battle{

}

class mixBattle extends battle{
    +bool isCardStrongerWithElements(card card1, card* card2)
}

class dialogue{
}

class demand{
    -int demandMinDamage
    -String demandType
    -String demandElement
    ..Getter..
    ..Setter..
    --Constructor--
    +demand(minDamage, type, element)
}

class gameControl{
 -user User1
 -user User2
 -battle currentBattle
 -dialogue gameDialogue
 -scoreboard gameScoreboard
 ..Getter..
 ..Setter..
 --Constructor--
 +gameControl()
 --Methods--
 +void playGame()
 +void signInUsers()
 +void visitTradingCenter(String token)
  +card selectCardForTrading(user currentUser)
  +void setUpDemand(int minDamage, String type, String element)
 +void changeProfile(user currentUser)
 +void buyPackages(user currentUser)
  +package generatePackage(String type)
 +void chooseBattle()
 +void startBattle()
  +void updateScores(user* winner, user* loser)
  +void updateScoreboard(String winner, String loser)
}


gameControl --> user
gameControl --> package
gameControl --> scoreBoard
gameControl --> battle
gameControl --> demand
gameControl --> dialogue

user --> deck
user --> stack
user --> demand

deck --> card

stack --> card

@enduml